name: Continuous Integration and Delivery

on:
  push:
    branches:
      - dev

env:
  BACKEND_IMAGE: ${{ secrets.BACKEND_IMAGE }}
  FRONTEND_IMAGE: ${{ secrets.FRONTEND_IMAGE }}
  NGINX_IMAGE: ${{ secrets.NGINX_IMAGE }}

jobs:

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout dev
        uses: actions/checkout@v2
        with:
          ref: dev
      - name: Add environment variables to .env.dev
        run: |
          echo DEBUG=1 >> .env.dev
          echo POSTGRES_ENGINE=django.db.backends.postgresql >> .env.dev
          echo DATABASE=postgres >> .env.dev
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env.dev
          echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env.dev
          echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env.dev
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env.dev
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env.dev
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env.dev
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env.dev
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env.dev
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.BACKEND_IMAGE }} || true
          docker pull ${{ env.FRONTEND_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true
      - name: Build images
        run: |
          docker-compose -f docker-compose.ci.yml --env-file ./.env.dev build
      - name: Push images
        run: |
          docker push ${{ env.BACKEND_IMAGE }}
          docker push ${{ env.FRONTEND_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}

  deploy:
    name: Deploy to Vultr VPS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout dev
        uses: actions/checkout@v2
        with:
          ref: dev
      - name: Add environment variables to .env.dev
        run: |
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env.dev
          echo PGADMIN_LISTEN_PORT=${{ secrets.PGADMIN_LISTEN_PORT }} >> .env.dev
          echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> .env.dev
          echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> .env.dev
          echo DEBUG=1 >> .env.dev
          echo DATABASE=postgres >> .env.dev
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env.dev
          echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env.dev
          echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env.dev
          echo POSTGRES_ENGINE=django.db.backends.postgresql >> .env.dev
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env.dev
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env.dev
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env.dev
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env.dev
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env.dev
          echo BACKEND_IMAGE=$(echo ${{ env.BACKEND_IMAGE }} | tr '[:upper:]' '[:lower:]') >> .env.dev
          echo FRONTEND_IMAGE=$(echo ${{ env.FRONTEND_IMAGE }} | tr '[:upper:]' '[:lower:]') >> .env.dev
          echo NGINX_IMAGE=$(echo ${{ env.NGINX_IMAGE }} | tr '[:upper:]' '[:lower:]') >> .env.dev
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Build and deploy images on Vultr VPS
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env.dev ./docker-compose.yml root@${{ secrets.VPS_IP_ADDRESS }}:/home
          ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_IP_ADDRESS }} << 'ENDSSH'
            cd /home
            source .env.dev
            docker login docker.pkg.github.com -u ${{ secrets.USERNAME }} -p ${{ secrets.TOKEN }}
            docker pull $BACKEND_IMAGE
            docker pull $FRONTEND_IMAGE
            docker pull $NGINX_IMAGE
            docker-compose -f docker-compose.yml --env-file ./.env.dev up -d
            docker image prune -af
          ENDSSH
